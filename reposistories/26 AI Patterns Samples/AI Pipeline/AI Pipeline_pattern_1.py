import collections\n\nclass UserSession:\n    def __init__(self, user_id, browsing_history, cart_items, past_purchases):\n        self.user_id = user_id\n        self.browsing_history = browsing_history\n        self.cart_items = cart_items\n        self.past_purchases = past_purchases\n        self.user_profile_insights = None\n        self.recommended_products = None\n        self.optimized_prices = None\n        self.personal_offer = None\n\n    def __repr__(self):\n        return f"UserSession(ID:{self.user_id}, Recs:{self.recommended_products})"\n\nclass UserProfileAnalyzer:\n    def analyze(self, session: UserSession):\n        # Simulate an AI model for analyzing user behavior and preferences\n        interests = set(session.browsing_history + session.past_purchases)\n        if "electronics" in interests and "laptops" in interests:\n            session.user_profile_insights = f"Tech enthusiast, interested in {', '.join(interests)}"\n        elif "clothing" in interests and "shoes" in interests:\n            session.user_profile_insights = f"Fashion conscious, interested in {', '.join(interests)}"\n        else:\n            session.user_profile_insights = f"General buyer, broad interests including {', '.join(interests)}"\n        return session\n\nclass ProductRecommendationEngine:\n    def recommend(self, session: UserSession):\n        # Simulate an AI model for generating personalized product recommendations\n        if "Tech enthusiast" in session.user_profile_insights:\n            session.recommended_products = ["Latest Laptop Model X", "Noise-Cancelling Headphones", "Smartwatch Pro"]\n        elif "Fashion conscious" in session.user_profile_insights:\n            session.recommended_products = ["Designer Dress Y", "Running Shoes Z", "Luxury Handbag"]\n        else:\n            session.recommended_products = ["Best-selling Book A", "Kitchen Gadget B"]\n        return session\n\nclass PriceOptimizationEngine:\n    def optimize(self, session: UserSession):\n        # Simulate an AI model for dynamic pricing based on demand, user segment, etc.\n        optimized_prices = {}\n        for product in session.recommended_products:\n            base_price = 100 # Arbitrary base\n            if "Laptop" in product or "Dress" in product:\n                optimized_prices[product] = f"${base_price * 1.5:.2f} (High Demand)"\n            elif "Headphones" in product or "Shoes" in product:\n                optimized_prices[product] = f"${base_price * 1.2:.2f} (Medium Demand)"\n            else:\n                optimized_prices[product] = f"${base_price * 0.9:.2f} (Standard)"\n        session.optimized_prices = optimized_prices\n        return session\n\nclass PersonalizedOfferGenerator:\n    def generate(self, session: UserSession):\n        # Simulate an AI model for compiling a personalized offer\n        offer_text = [f"Hello {session.user_id}, based on your preferences, we recommend these items:"]\n        for product, price in session.optimized_prices.items():\n            offer_text.append(f"- {product} at {price}")\n        offer_text.append("\\nLimited time offer!")\n        session.personal_offer = "\\n".join(offer_text)\n        return session\n\nclass AIPipeline:\n    def __init__(self):\n        self.profile_analyzer = UserProfileAnalyzer()\n        self.recommendation_engine = ProductRecommendationEngine()\n        self.price_optimizer = PriceOptimizationEngine()\n        self.offer_generator = PersonalizedOfferGenerator()\n\n    def run_pipeline(self, session: UserSession):\n        print(f"--- Running pipeline for User ID: {session.user_id} ---")\n        session = self.profile_analyzer.analyze(session)\n        print(f"Step 1 (Profile Analysis) Output: {session.user_profile_insights}")\n        session = self.recommendation_engine.recommend(session)\n        print(f"Step 2 (Recommendation) Output: {session.recommended_products}")\n        session = self.price_optimizer.optimize(session)\n        print(f"Step 3 (Price Optimization) Output: {session.optimized_prices}")\n        session = self.offer_generator.generate(session)\n        print(f"Step 4 (Offer Generation) Output: Offer generated.")\n        print(f"--- Pipeline completed for User ID: {session.user_id} ---")\n        return session\n\nif __name__ == "__main__":\n    # Real-world usage simulation: E-commerce personalized recommendations\n    user1_session = UserSession(\n        user_id="Alice",\n        browsing_history=["laptops", "smartphones", "gaming consoles"],\n        cart_items=[],\n        past_purchases=["laptop", "webcam"]\n    )\n\n    user2_session = UserSession(\n        user_id="Bob",\n        browsing_history=["t-shirts", "jeans", "sneakers"],\n        cart_items=["t-shirt"],\n        past_purchases=["jeans", "hoodie"]\n    )\n\n    pipeline = AIPipeline()\n\n    result1 = pipeline.run_pipeline(user1_session)\n    print("\\nFinal Result 1 Offer:")\n    print(result1.personal_offer)\n    print("\\n" + "="*80 + "\\n")\n\n    result2 = pipeline.run_pipeline(user2_session)\n    print("\\nFinal Result 2 Offer:")\n    print(result2.personal_offer)\n