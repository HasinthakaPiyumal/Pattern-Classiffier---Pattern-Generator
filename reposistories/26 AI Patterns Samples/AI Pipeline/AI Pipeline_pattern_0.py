import collections\n\nclass MedicalImage:\n    def __init__(self, id, raw_data):\n        self.id = id\n        self.raw_data = raw_data\n        self.processed_data = None\n        self.features = None\n        self.diagnosis_suggestion = None\n        self.report = None\n\n    def __repr__(self):\n        return f"Image(ID:{self.id}, Diag:{self.diagnosis_suggestion})"\n\nclass ImagePreprocessor:\n    def process(self, image: MedicalImage):\n        # Simulate an AI model for image preprocessing (e.g., normalization, noise reduction)\n        image.processed_data = f"Processed_data_for_image_{image.id}_from_{image.raw_data}"\n        return image\n\nclass FeatureExtractor:\n    def extract(self, image: MedicalImage):\n        # Simulate an AI model for feature extraction (e.g., tumor detection, lesion identification)\n        if "abnormal" in image.processed_data: # Simple simulation of abnormality\n            image.features = f"Abnormal_features_detected_in_{image.processed_data}"\n        else:\n            image.features = f"Normal_features_detected_in_{image.processed_data}"\n        return image\n\nclass DiagnosisClassifier:\n    def classify(self, image: MedicalImage):\n        # Simulate an AI model for diagnosis classification\n        if "Abnormal_features" in image.features:\n            image.diagnosis_suggestion = "Potential Malignancy (requires further testing)"\n        else:\n            image.diagnosis_suggestion = "Benign Condition or Normal"\n        return image\n\nclass ReportGenerator:\n    def generate(self, image: MedicalImage):\n        # Simulate an AI model for generating a detailed report\n        image.report = (\n            f"Medical Report for Image ID: {image.id}\\n"\n            f"----------------------------------------\\n"\n            f"Processed Data Summary: {image.processed_data}\\n"\n            f"Extracted Features: {image.features}\\n"\n            f"AI Diagnosis Suggestion: {image.diagnosis_suggestion}\\n"\n            f"Recommendation: Consult with a specialist for definitive diagnosis."\n        )\n        return image\n\nclass AIPipeline:\n    def __init__(self):\n        self.preprocessor = ImagePreprocessor()\n        self.extractor = FeatureExtractor()\n        self.classifier = DiagnosisClassifier()\n        self.reporter = ReportGenerator()\n\n    def run_pipeline(self, image: MedicalImage):\n        print(f"--- Running pipeline for Image ID: {image.id} ---")\n        image = self.preprocessor.process(image)\n        print(f"Step 1 (Preprocessing) Output: {image.processed_data[:50]}...")\n        image = self.extractor.extract(image)\n        print(f"Step 2 (Feature Extraction) Output: {image.features[:50]}...")\n        image = self.classifier.classify(image)\n        print(f"Step 3 (Diagnosis Classification) Output: {image.diagnosis_suggestion}")\n        image = self.reporter.generate(image)\n        print(f"Step 4 (Report Generation) Output: Report generated.")\n        print(f"--- Pipeline completed for Image ID: {image.id} ---")\n        return image\n\nif __name__ == "__main__":\n    # Real-world usage simulation: Processing medical scans for diagnosis assistance\n    patient_scan1 = MedicalImage(id="P001-CT-001", raw_data="CT_scan_data_showing_abnormal_growth")\n    patient_scan2 = MedicalImage(id="P002-MRI-005", raw_data="MRI_scan_data_showing_normal_tissue")\n\n    pipeline = AIPipeline()\n\n    result1 = pipeline.run_pipeline(patient_scan1)\n    print("\\nFinal Result 1 Report:")\n    print(result1.report)\n    print("\\n" + "="*80 + "\\n")\n\n    result2 = pipeline.run_pipeline(patient_scan2)\n    print("\\nFinal Result 2 Report:")\n    print(result2.report)\n